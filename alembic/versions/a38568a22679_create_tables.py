"""create tables

Revision ID: a38568a22679
Revises: 
Create Date: 2025-09-29 04:45:48.919226

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = 'a38568a22679'
down_revision: Union[str, None] = None
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('facilities',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('facility_name', sa.String(length=100), nullable=False),
    sa.Column('facility_email', sa.String(length=100), nullable=False),
    sa.Column('facility_digital_address', sa.String(length=15), nullable=False),
    sa.Column('facility_contact_number', sa.String(length=20), nullable=True),
    sa.Column('latitude', sa.Float(), nullable=True),
    sa.Column('longitude', sa.Float(), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('facility_manager_id', sa.UUID(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('facilities', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_facilities_facility_email'), ['facility_email'], unique=True)
        batch_op.create_index(batch_op.f('ix_facilities_facility_manager_id'), ['facility_manager_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_facilities_id'), ['id'], unique=True)

    op.create_table('patients',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('name', sa.String(length=100), nullable=False),
    sa.Column('age', sa.Integer(), nullable=False),
    sa.Column('sex', sa.String(length=10), nullable=False),
    sa.Column('diagnosis', sa.String(length=255), nullable=True),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('patients', schema=None) as batch_op:
        batch_op.create_index('idx_patient_created_name', ['created_at', 'name'], unique=False)
        batch_op.create_index('idx_patient_name_age', ['name', 'age'], unique=False)
        batch_op.create_index('idx_patient_sex_age', ['sex', 'age'], unique=False)
        batch_op.create_index(batch_op.f('ix_patients_age'), ['age'], unique=False)
        batch_op.create_index(batch_op.f('ix_patients_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_patients_diagnosis'), ['diagnosis'], unique=False)
        batch_op.create_index(batch_op.f('ix_patients_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_patients_name'), ['name'], unique=False)
        batch_op.create_index(batch_op.f('ix_patients_sex'), ['sex'], unique=False)

    op.create_table('permissions',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=96), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_permissions_name'), ['name'], unique=True)

    op.create_table('roles',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('name', sa.String(length=64), nullable=True),
    sa.Column('parent_id', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['parent_id'], ['roles.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_roles_name'), ['name'], unique=True)

    op.create_table('dashboard_daily_summary',
    sa.Column('date', sa.Date(), nullable=False),
    sa.Column('total_requests', sa.Integer(), nullable=False),
    sa.Column('total_transferred', sa.Integer(), nullable=False),
    sa.Column('total_stock', sa.Integer(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('facility_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['facility_id'], ['facilities.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('date', 'facility_id')
    )
    op.create_table('role_permissions',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('permission_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['permission_id'], ['permissions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'permission_id')
    )
    op.create_table('users',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('first_name', sa.String(length=100), nullable=False),
    sa.Column('last_name', sa.String(length=100), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('password', sa.String(length=255), nullable=False),
    sa.Column('phone', sa.String(length=20), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('status', sa.Boolean(), nullable=False),
    sa.Column('work_facility_id', sa.UUID(), nullable=True),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_banned', sa.Boolean(), nullable=False),
    sa.Column('is_suspended', sa.Boolean(), nullable=False),
    sa.Column('verification_token', sa.String(), nullable=True),
    sa.Column('failed_login_attempts', sa.Integer(), nullable=False),
    sa.Column('locked_until', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('last_login', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['work_facility_id'], ['facilities.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_users_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_failed_login_attempts'), ['failed_login_attempts'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_first_name'), ['first_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_users_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_is_banned'), ['is_banned'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_is_suspended'), ['is_suspended'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_is_verified'), ['is_verified'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_last_login'), ['last_login'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_last_name'), ['last_name'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_locked_until'), ['locked_until'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_status'), ['status'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_verification_token'), ['verification_token'], unique=False)
        batch_op.create_index(batch_op.f('ix_users_work_facility_id'), ['work_facility_id'], unique=False)

    op.create_table('blood_banks',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('blood_bank_name', sa.String(length=100), nullable=False),
    sa.Column('phone', sa.String(length=15), nullable=False),
    sa.Column('email', sa.String(length=100), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('facility_id', sa.UUID(), nullable=False),
    sa.Column('manager_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['facility_id'], ['facilities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['manager_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('blood_banks', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_blood_banks_email'), ['email'], unique=True)
        batch_op.create_index(batch_op.f('ix_blood_banks_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_blood_banks_manager_id'), ['manager_id'], unique=True)

    op.create_table('blood_requests',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('request_group_id', sa.UUID(), nullable=False),
    sa.Column('is_master_request', sa.Boolean(), nullable=False),
    sa.Column('blood_type', sa.String(length=10), nullable=False),
    sa.Column('blood_product', sa.String(length=50), nullable=False),
    sa.Column('quantity_requested', sa.Integer(), nullable=False),
    sa.Column('request_status', sa.Enum('PENDING', 'ACCEPTED', 'REJECTED', 'CANCELLED', name='requeststatus'), nullable=False),
    sa.Column('processing_status', sa.Enum('PENDING', 'INITIATED', 'DISPATCHED', 'COMPLETED', name='processingstatus'), nullable=False),
    sa.Column('priority', sa.Enum('URGENT', 'NOT_URGENT', name='prioritystatus'), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.Column('cancellation_reason', sa.String(length=200), nullable=True),
    sa.Column('option', sa.String(length=10), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('requester_id', sa.UUID(), nullable=False),
    sa.Column('fulfilled_by_id', sa.UUID(), nullable=True),
    sa.Column('facility_id', sa.UUID(), nullable=False, comment='Target/receiving facility for the request'),
    sa.Column('source_facility_id', sa.UUID(), nullable=False, comment='Source/originating facility for the request'),
    sa.ForeignKeyConstraint(['facility_id'], ['facilities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['fulfilled_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['requester_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['source_facility_id'], ['facilities.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('blood_requests', schema=None) as batch_op:
        batch_op.create_index('idx_request_blood_urgent', ['blood_type', 'priority', 'request_status'], unique=False)
        batch_op.create_index('idx_request_created_status', ['created_at', 'request_status'], unique=False)
        batch_op.create_index('idx_request_facility_status', ['facility_id', 'request_status'], unique=False)
        batch_op.create_index('idx_request_group_master', ['request_group_id', 'is_master_request'], unique=False)
        batch_op.create_index('idx_request_processing_priority', ['processing_status', 'priority'], unique=False)
        batch_op.create_index('idx_request_product_facility', ['blood_product', 'facility_id'], unique=False)
        batch_op.create_index('idx_request_requester_date', ['requester_id', 'created_at'], unique=False)
        batch_op.create_index('idx_request_source_status', ['source_facility_id', 'request_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_blood_product'), ['blood_product'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_blood_type'), ['blood_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_facility_id'), ['facility_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_fulfilled_by_id'), ['fulfilled_by_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_is_master_request'), ['is_master_request'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_priority'), ['priority'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_processing_status'), ['processing_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_quantity_requested'), ['quantity_requested'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_request_group_id'), ['request_group_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_request_status'), ['request_status'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_requester_id'), ['requester_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_source_facility_id'), ['source_facility_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_requests_updated_at'), ['updated_at'], unique=False)

    op.create_table('device_trust',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('device_fingerprint', sa.String(length=64), nullable=False),
    sa.Column('device_fingerprint_v2', sa.String(length=64), nullable=True),
    sa.Column('device_name', sa.String(length=100), nullable=True),
    sa.Column('device_type', sa.String(length=50), nullable=True),
    sa.Column('operating_system', sa.String(length=100), nullable=True),
    sa.Column('browser_name', sa.String(length=100), nullable=True),
    sa.Column('browser_version', sa.String(length=50), nullable=True),
    sa.Column('trust_score', sa.Integer(), nullable=False),
    sa.Column('trust_level', sa.String(length=20), nullable=False),
    sa.Column('is_trusted', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('is_registered', sa.Boolean(), nullable=False),
    sa.Column('total_sessions', sa.Integer(), nullable=False),
    sa.Column('successful_logins', sa.Integer(), nullable=False),
    sa.Column('failed_attempts', sa.Integer(), nullable=False),
    sa.Column('suspicious_activities', sa.Integer(), nullable=False),
    sa.Column('verification_challenges_passed', sa.Integer(), nullable=False),
    sa.Column('verification_challenges_failed', sa.Integer(), nullable=False),
    sa.Column('risk_score', sa.Integer(), nullable=False),
    sa.Column('risk_factors', sa.Text(), nullable=True),
    sa.Column('first_seen_ip', sa.String(length=45), nullable=True),
    sa.Column('first_seen_country', sa.String(length=3), nullable=True),
    sa.Column('first_seen_city', sa.String(length=100), nullable=True),
    sa.Column('last_seen_ip', sa.String(length=45), nullable=True),
    sa.Column('last_seen_country', sa.String(length=3), nullable=True),
    sa.Column('last_seen_city', sa.String(length=100), nullable=True),
    sa.Column('location_consistency_score', sa.Integer(), nullable=False),
    sa.Column('capabilities', sa.JSON(), nullable=True),
    sa.Column('hardware_fingerprint', sa.String(length=64), nullable=True),
    sa.Column('verification_method', sa.String(length=50), nullable=True),
    sa.Column('verification_token', sa.String(length=255), nullable=True),
    sa.Column('verification_expires_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('first_seen', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('last_seen', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('last_trust_update', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('verified_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('registered_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_revoked', sa.Boolean(), nullable=False),
    sa.Column('revoked_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('revoked_reason', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('device_trust', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_device_trust_device_fingerprint'), ['device_fingerprint'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_trust_device_fingerprint_v2'), ['device_fingerprint_v2'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_trust_first_seen_ip'), ['first_seen_ip'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_trust_id'), ['id'], unique=False)
        batch_op.create_index('ix_device_trust_last_seen', ['last_seen'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_trust_last_seen_ip'), ['last_seen_ip'], unique=False)
        batch_op.create_index('ix_device_trust_risk_score', ['risk_score'], unique=False)
        batch_op.create_index('ix_device_trust_trust_level', ['trust_level'], unique=False)
        batch_op.create_index('ix_device_trust_user_fingerprint', ['user_id', 'device_fingerprint'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_trust_user_id'), ['user_id'], unique=False)

    op.create_table('impersonation_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('moderator_id', sa.UUID(), nullable=True),
    sa.Column('target_user_id', sa.UUID(), nullable=True),
    sa.Column('reason', sa.String(length=255), nullable=True),
    sa.Column('started_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('ended_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['moderator_id'], ['users.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['target_user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('impersonation_sessions', schema=None) as batch_op:
        batch_op.create_index('ix_impersonation_active_moderator', ['active', 'moderator_id'], unique=False)
        batch_op.create_index('ix_impersonation_active_target', ['active', 'target_user_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_impersonation_sessions_active'), ['active'], unique=False)
        batch_op.create_index(batch_op.f('ix_impersonation_sessions_moderator_id'), ['moderator_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_impersonation_sessions_target_user_id'), ['target_user_id'], unique=False)

    op.create_table('notifications',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('title', sa.String(length=255), nullable=False),
    sa.Column('message', sa.String(length=500), nullable=False),
    sa.Column('is_read', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('refresh_tokens',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('token_hash', sa.String(length=255), nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('revoked', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('absolute_expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('usage_count', sa.Integer(), nullable=False),
    sa.Column('last_used_at', sa.DateTime(), nullable=False),
    sa.Column('device_info', sa.String(length=500), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_refresh_tokens_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_refresh_tokens_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_refresh_tokens_token_hash'), ['token_hash'], unique=False)
        batch_op.create_index(batch_op.f('ix_refresh_tokens_user_id'), ['user_id'], unique=False)

    op.create_table('user_role_scopes',
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.Column('facility_id', sa.String(length=36), nullable=True),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('role_id', 'user_id')
    )
    with op.batch_alter_table('user_role_scopes', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_user_role_scopes_facility_id'), ['facility_id'], unique=False)

    op.create_table('user_roles',
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('role_id', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['role_id'], ['roles.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('user_id', 'role_id')
    )
    op.create_table('user_sessions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('session_token', sa.String(length=255), nullable=False),
    sa.Column('device_fingerprint', sa.String(length=255), nullable=True),
    sa.Column('user_agent', sa.String(length=1000), nullable=True),
    sa.Column('user_agent_hash', sa.String(length=64), nullable=True),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('country', sa.String(length=50), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('isp', sa.String(length=200), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_suspicious', sa.Boolean(), nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('last_activity', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('terminated_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('login_method', sa.String(length=50), nullable=True),
    sa.Column('risk_score', sa.Integer(), nullable=False),
    sa.Column('total_requests', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.create_index('idx_session_created_active', ['created_at', 'is_active'], unique=False)
        batch_op.create_index('idx_session_device_user', ['device_fingerprint', 'user_id'], unique=False)
        batch_op.create_index('idx_session_ip_user', ['ip_address', 'user_id'], unique=False)
        batch_op.create_index('idx_session_suspicious', ['is_suspicious', 'risk_score'], unique=False)
        batch_op.create_index('idx_session_token_active', ['session_token', 'is_active'], unique=False)
        batch_op.create_index('idx_session_user_active', ['user_id', 'is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_device_fingerprint'), ['device_fingerprint'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_expires_at'), ['expires_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_ip_address'), ['ip_address'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_is_active'), ['is_active'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_is_suspicious'), ['is_suspicious'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_last_activity'), ['last_activity'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_session_token'), ['session_token'], unique=True)
        batch_op.create_index(batch_op.f('ix_user_sessions_user_agent_hash'), ['user_agent_hash'], unique=False)
        batch_op.create_index(batch_op.f('ix_user_sessions_user_id'), ['user_id'], unique=False)

    op.create_table('blood_inventory',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('blood_product', sa.String(length=50), nullable=False),
    sa.Column('blood_type', sa.String(length=10), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('expiry_date', sa.Date(), nullable=False),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('blood_bank_id', sa.UUID(), nullable=False),
    sa.Column('added_by_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['added_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['blood_bank_id'], ['blood_banks.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('blood_inventory', schema=None) as batch_op:
        batch_op.create_index('idx_inventory_blood_bank_type', ['blood_bank_id', 'blood_type'], unique=False)
        batch_op.create_index('idx_inventory_created_bank', ['created_at', 'blood_bank_id'], unique=False)
        batch_op.create_index('idx_inventory_expiry_bank', ['expiry_date', 'blood_bank_id'], unique=False)
        batch_op.create_index('idx_inventory_product_expiry', ['blood_product', 'expiry_date'], unique=False)
        batch_op.create_index('idx_inventory_product_type_bank', ['blood_product', 'blood_type', 'blood_bank_id'], unique=False)
        batch_op.create_index('idx_inventory_type_quantity', ['blood_type', 'quantity'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_inventory_added_by_id'), ['added_by_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_inventory_blood_bank_id'), ['blood_bank_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_inventory_blood_product'), ['blood_product'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_inventory_blood_type'), ['blood_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_inventory_created_at'), ['created_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_inventory_expiry_date'), ['expiry_date'], unique=False)
        batch_op.create_index(batch_op.f('ix_blood_inventory_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_blood_inventory_quantity'), ['quantity'], unique=False)

    op.create_table('device_registrations',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('device_trust_id', sa.UUID(), nullable=True),
    sa.Column('registration_token', sa.String(length=255), nullable=False),
    sa.Column('device_fingerprint', sa.String(length=64), nullable=False),
    sa.Column('challenge_id', sa.String(length=255), nullable=False),
    sa.Column('challenge_data', sa.Text(), nullable=False),
    sa.Column('challenge_response', sa.Text(), nullable=True),
    sa.Column('verification_method', sa.String(length=50), nullable=False),
    sa.Column('device_name', sa.String(length=100), nullable=True),
    sa.Column('device_data', sa.JSON(), nullable=False),
    sa.Column('capabilities', sa.JSON(), nullable=True),
    sa.Column('status', sa.String(length=20), nullable=False),
    sa.Column('attempts', sa.Integer(), nullable=False),
    sa.Column('max_attempts', sa.Integer(), nullable=False),
    sa.Column('registration_ip', sa.String(length=45), nullable=True),
    sa.Column('registration_country', sa.String(length=3), nullable=True),
    sa.Column('registration_city', sa.String(length=100), nullable=True),
    sa.Column('initiated_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('expires_at', postgresql.TIMESTAMP(timezone=True), nullable=False),
    sa.Column('completed_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('last_attempt_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.ForeignKeyConstraint(['device_trust_id'], ['device_trust.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('device_registrations', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_device_registrations_device_fingerprint'), ['device_fingerprint'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_registrations_device_trust_id'), ['device_trust_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_registrations_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_registrations_registration_token'), ['registration_token'], unique=True)
        batch_op.create_index(batch_op.f('ix_device_registrations_user_id'), ['user_id'], unique=False)

    op.create_table('device_security_events',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('user_id', sa.UUID(), nullable=False),
    sa.Column('device_trust_id', sa.UUID(), nullable=True),
    sa.Column('session_id', sa.UUID(), nullable=True),
    sa.Column('event_type', sa.String(length=50), nullable=False),
    sa.Column('event_category', sa.String(length=20), nullable=False),
    sa.Column('severity', sa.String(length=10), nullable=False),
    sa.Column('description', sa.Text(), nullable=False),
    sa.Column('event_data', sa.JSON(), nullable=True),
    sa.Column('risk_score_impact', sa.Integer(), nullable=False),
    sa.Column('trust_score_impact', sa.Integer(), nullable=False),
    sa.Column('ip_address', sa.String(length=45), nullable=True),
    sa.Column('user_agent', sa.Text(), nullable=True),
    sa.Column('country', sa.String(length=3), nullable=True),
    sa.Column('city', sa.String(length=100), nullable=True),
    sa.Column('occurred_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('resolved_at', postgresql.TIMESTAMP(timezone=True), nullable=True),
    sa.Column('is_resolved', sa.Boolean(), nullable=False),
    sa.Column('resolution_action', sa.String(length=255), nullable=True),
    sa.ForeignKeyConstraint(['device_trust_id'], ['device_trust.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['session_id'], ['user_sessions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('device_security_events', schema=None) as batch_op:
        batch_op.create_index('ix_device_security_events_category', ['event_category'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_security_events_device_trust_id'), ['device_trust_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_security_events_event_category'), ['event_category'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_security_events_event_type'), ['event_type'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_security_events_id'), ['id'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_security_events_ip_address'), ['ip_address'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_security_events_occurred_at'), ['occurred_at'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_security_events_session_id'), ['session_id'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_security_events_severity'), ['severity'], unique=False)
        batch_op.create_index('ix_device_security_events_type_severity', ['event_type', 'severity'], unique=False)
        batch_op.create_index(batch_op.f('ix_device_security_events_user_id'), ['user_id'], unique=False)
        batch_op.create_index('ix_device_security_events_user_occurred', ['user_id', 'occurred_at'], unique=False)

    op.create_table('blood_distributions',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('blood_product', sa.String(length=50), nullable=False),
    sa.Column('blood_type', sa.String(length=10), nullable=False),
    sa.Column('quantity', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('PENDING_RECEIVE', 'IN_TRANSIT', 'DELIVERED', 'CANCELLED', 'RETURNED', name='distribution_status'), nullable=False),
    sa.Column('date_dispatched', sa.DateTime(), nullable=True),
    sa.Column('date_delivered', sa.DateTime(), nullable=True),
    sa.Column('tracking_number', sa.String(length=100), nullable=True),
    sa.Column('notes', sa.String(length=500), nullable=True),
    sa.Column('batch_number', sa.String(length=50), nullable=True, comment='Batch number for inventory tracking and traceability'),
    sa.Column('expiry_date', sa.Date(), nullable=True, comment='Expiry date of the blood product'),
    sa.Column('temperature_maintained', sa.Boolean(), nullable=True, comment='Whether proper temperature was maintained during transport'),
    sa.Column('created_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('updated_at', sa.DateTime(), server_default=sa.text('(CURRENT_TIMESTAMP)'), nullable=False),
    sa.Column('blood_product_id', sa.UUID(), nullable=True),
    sa.Column('request_id', sa.UUID(), nullable=True, comment='Link to the original blood request that triggered this distribution'),
    sa.Column('dispatched_from_id', sa.UUID(), nullable=False),
    sa.Column('dispatched_to_id', sa.UUID(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=True),
    sa.ForeignKeyConstraint(['blood_product_id'], ['blood_inventory.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.ForeignKeyConstraint(['dispatched_from_id'], ['blood_banks.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['dispatched_to_id'], ['facilities.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['request_id'], ['blood_requests.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    with op.batch_alter_table('blood_distributions', schema=None) as batch_op:
        batch_op.create_index(batch_op.f('ix_blood_distributions_id'), ['id'], unique=True)
        batch_op.create_index(batch_op.f('ix_blood_distributions_request_id'), ['request_id'], unique=False)

    op.create_table('track_states',
    sa.Column('id', sa.UUID(), nullable=False),
    sa.Column('status', sa.String(), nullable=False),
    sa.Column('location', sa.String(), nullable=True),
    sa.Column('notes', sa.String(), nullable=True),
    sa.Column('timestamp', sa.DateTime(timezone=True), nullable=False),
    sa.Column('blood_distribution_id', sa.UUID(), nullable=True),
    sa.Column('blood_request_id', sa.UUID(), nullable=False),
    sa.Column('created_by_id', sa.UUID(), nullable=False),
    sa.ForeignKeyConstraint(['blood_distribution_id'], ['blood_distributions.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['blood_request_id'], ['blood_requests.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['created_by_id'], ['users.id'], ondelete='SET NULL'),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('track_states')
    with op.batch_alter_table('blood_distributions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_blood_distributions_request_id'))
        batch_op.drop_index(batch_op.f('ix_blood_distributions_id'))

    op.drop_table('blood_distributions')
    with op.batch_alter_table('device_security_events', schema=None) as batch_op:
        batch_op.drop_index('ix_device_security_events_user_occurred')
        batch_op.drop_index(batch_op.f('ix_device_security_events_user_id'))
        batch_op.drop_index('ix_device_security_events_type_severity')
        batch_op.drop_index(batch_op.f('ix_device_security_events_severity'))
        batch_op.drop_index(batch_op.f('ix_device_security_events_session_id'))
        batch_op.drop_index(batch_op.f('ix_device_security_events_occurred_at'))
        batch_op.drop_index(batch_op.f('ix_device_security_events_ip_address'))
        batch_op.drop_index(batch_op.f('ix_device_security_events_id'))
        batch_op.drop_index(batch_op.f('ix_device_security_events_event_type'))
        batch_op.drop_index(batch_op.f('ix_device_security_events_event_category'))
        batch_op.drop_index(batch_op.f('ix_device_security_events_device_trust_id'))
        batch_op.drop_index('ix_device_security_events_category')

    op.drop_table('device_security_events')
    with op.batch_alter_table('device_registrations', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_device_registrations_user_id'))
        batch_op.drop_index(batch_op.f('ix_device_registrations_registration_token'))
        batch_op.drop_index(batch_op.f('ix_device_registrations_id'))
        batch_op.drop_index(batch_op.f('ix_device_registrations_device_trust_id'))
        batch_op.drop_index(batch_op.f('ix_device_registrations_device_fingerprint'))

    op.drop_table('device_registrations')
    with op.batch_alter_table('blood_inventory', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_blood_inventory_quantity'))
        batch_op.drop_index(batch_op.f('ix_blood_inventory_id'))
        batch_op.drop_index(batch_op.f('ix_blood_inventory_expiry_date'))
        batch_op.drop_index(batch_op.f('ix_blood_inventory_created_at'))
        batch_op.drop_index(batch_op.f('ix_blood_inventory_blood_type'))
        batch_op.drop_index(batch_op.f('ix_blood_inventory_blood_product'))
        batch_op.drop_index(batch_op.f('ix_blood_inventory_blood_bank_id'))
        batch_op.drop_index(batch_op.f('ix_blood_inventory_added_by_id'))
        batch_op.drop_index('idx_inventory_type_quantity')
        batch_op.drop_index('idx_inventory_product_type_bank')
        batch_op.drop_index('idx_inventory_product_expiry')
        batch_op.drop_index('idx_inventory_expiry_bank')
        batch_op.drop_index('idx_inventory_created_bank')
        batch_op.drop_index('idx_inventory_blood_bank_type')

    op.drop_table('blood_inventory')
    with op.batch_alter_table('user_sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_sessions_user_id'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_user_agent_hash'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_session_token'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_last_activity'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_is_suspicious'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_is_active'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_ip_address'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_id'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_expires_at'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_device_fingerprint'))
        batch_op.drop_index(batch_op.f('ix_user_sessions_created_at'))
        batch_op.drop_index('idx_session_user_active')
        batch_op.drop_index('idx_session_token_active')
        batch_op.drop_index('idx_session_suspicious')
        batch_op.drop_index('idx_session_ip_user')
        batch_op.drop_index('idx_session_device_user')
        batch_op.drop_index('idx_session_created_active')

    op.drop_table('user_sessions')
    op.drop_table('user_roles')
    with op.batch_alter_table('user_role_scopes', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_user_role_scopes_facility_id'))

    op.drop_table('user_role_scopes')
    with op.batch_alter_table('refresh_tokens', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_refresh_tokens_user_id'))
        batch_op.drop_index(batch_op.f('ix_refresh_tokens_token_hash'))
        batch_op.drop_index(batch_op.f('ix_refresh_tokens_id'))
        batch_op.drop_index(batch_op.f('ix_refresh_tokens_expires_at'))

    op.drop_table('refresh_tokens')
    op.drop_table('notifications')
    with op.batch_alter_table('impersonation_sessions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_impersonation_sessions_target_user_id'))
        batch_op.drop_index(batch_op.f('ix_impersonation_sessions_moderator_id'))
        batch_op.drop_index(batch_op.f('ix_impersonation_sessions_active'))
        batch_op.drop_index('ix_impersonation_active_target')
        batch_op.drop_index('ix_impersonation_active_moderator')

    op.drop_table('impersonation_sessions')
    with op.batch_alter_table('device_trust', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_device_trust_user_id'))
        batch_op.drop_index('ix_device_trust_user_fingerprint')
        batch_op.drop_index('ix_device_trust_trust_level')
        batch_op.drop_index('ix_device_trust_risk_score')
        batch_op.drop_index(batch_op.f('ix_device_trust_last_seen_ip'))
        batch_op.drop_index('ix_device_trust_last_seen')
        batch_op.drop_index(batch_op.f('ix_device_trust_id'))
        batch_op.drop_index(batch_op.f('ix_device_trust_first_seen_ip'))
        batch_op.drop_index(batch_op.f('ix_device_trust_device_fingerprint_v2'))
        batch_op.drop_index(batch_op.f('ix_device_trust_device_fingerprint'))

    op.drop_table('device_trust')
    with op.batch_alter_table('blood_requests', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_blood_requests_updated_at'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_source_facility_id'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_requester_id'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_request_status'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_request_group_id'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_quantity_requested'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_processing_status'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_priority'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_is_master_request'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_id'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_fulfilled_by_id'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_facility_id'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_created_at'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_blood_type'))
        batch_op.drop_index(batch_op.f('ix_blood_requests_blood_product'))
        batch_op.drop_index('idx_request_source_status')
        batch_op.drop_index('idx_request_requester_date')
        batch_op.drop_index('idx_request_product_facility')
        batch_op.drop_index('idx_request_processing_priority')
        batch_op.drop_index('idx_request_group_master')
        batch_op.drop_index('idx_request_facility_status')
        batch_op.drop_index('idx_request_created_status')
        batch_op.drop_index('idx_request_blood_urgent')

    op.drop_table('blood_requests')
    with op.batch_alter_table('blood_banks', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_blood_banks_manager_id'))
        batch_op.drop_index(batch_op.f('ix_blood_banks_id'))
        batch_op.drop_index(batch_op.f('ix_blood_banks_email'))

    op.drop_table('blood_banks')
    with op.batch_alter_table('users', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_users_work_facility_id'))
        batch_op.drop_index(batch_op.f('ix_users_verification_token'))
        batch_op.drop_index(batch_op.f('ix_users_status'))
        batch_op.drop_index(batch_op.f('ix_users_locked_until'))
        batch_op.drop_index(batch_op.f('ix_users_last_name'))
        batch_op.drop_index(batch_op.f('ix_users_last_login'))
        batch_op.drop_index(batch_op.f('ix_users_is_verified'))
        batch_op.drop_index(batch_op.f('ix_users_is_suspended'))
        batch_op.drop_index(batch_op.f('ix_users_is_banned'))
        batch_op.drop_index(batch_op.f('ix_users_is_active'))
        batch_op.drop_index(batch_op.f('ix_users_id'))
        batch_op.drop_index(batch_op.f('ix_users_first_name'))
        batch_op.drop_index(batch_op.f('ix_users_failed_login_attempts'))
        batch_op.drop_index(batch_op.f('ix_users_email'))
        batch_op.drop_index(batch_op.f('ix_users_created_at'))

    op.drop_table('users')
    op.drop_table('role_permissions')
    op.drop_table('dashboard_daily_summary')
    with op.batch_alter_table('roles', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_roles_name'))

    op.drop_table('roles')
    with op.batch_alter_table('permissions', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_permissions_name'))

    op.drop_table('permissions')
    with op.batch_alter_table('patients', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_patients_sex'))
        batch_op.drop_index(batch_op.f('ix_patients_name'))
        batch_op.drop_index(batch_op.f('ix_patients_id'))
        batch_op.drop_index(batch_op.f('ix_patients_diagnosis'))
        batch_op.drop_index(batch_op.f('ix_patients_created_at'))
        batch_op.drop_index(batch_op.f('ix_patients_age'))
        batch_op.drop_index('idx_patient_sex_age')
        batch_op.drop_index('idx_patient_name_age')
        batch_op.drop_index('idx_patient_created_name')

    op.drop_table('patients')
    with op.batch_alter_table('facilities', schema=None) as batch_op:
        batch_op.drop_index(batch_op.f('ix_facilities_id'))
        batch_op.drop_index(batch_op.f('ix_facilities_facility_manager_id'))
        batch_op.drop_index(batch_op.f('ix_facilities_facility_email'))

    op.drop_table('facilities')
    # ### end Alembic commands ###
